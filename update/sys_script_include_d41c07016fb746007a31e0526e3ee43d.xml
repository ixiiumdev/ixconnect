<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ixii2_ixconnect.ixQueueConnect</api_name>
        <client_callable>false</client_callable>
        <description>Create the IXQueue record for IXCore to connect to</description>
        <name>ixQueueConnect</name>
        <script><![CDATA[var ixQueueConnect = Class.create();
ixQueueConnect.prototype = {
	
	initialize: function() {
	},
	
	//function to create an task record
	createInc: function(from, to, time, prcs, act, sid, data, incid, isSource, topic){
		//building up an object for the payload. Will parse it to a JSON string.
		//all neccessary CDM translations are in the data parameter
		var trPrcs = this._getProcess(prcs);
		var obj = {
			"Header": {
				"From": from.toString(),
				"To": to.toString(),
				"Timestamp": time.toString(),
				"Process": trPrcs.toString(),
				"Action": act,
				"IsSource": isSource.toString(),
				"Identifier": incid.toString(),
				"Topic": topic
			},
			"Data": data
			
		};
		//parse the object to the IXQueue payload
		this._generateIXQueue(global.JSON.stringify(obj), sid, topic);
	},
	
	//update incident function
	updateInc: function(from, to, time, prcs, act, sid, data, incid, isSource, topic){
		//building up an object for the payload. Will parse it to a JSON string.
		//all neccessary CDM translations are in the data parameter
		var trPrcs = this._getProcess(prcs);
		var obj = {
			"Header": {
				"From": from.toString(),
				"To": to.toString(),
				"Timestamp": time.toString(),
				"Process": trPrcs.toString(),
				"Action": act,
				"IsSource": isSource.toString(),
				"Identifier": incid.toString(),
				"Topic": topic
			},
			"Data": data
		};
		//parse the object to the IXQueue payload
		this._generateIXQueue(global.JSON.stringify(obj), sid, topic);
	},
	
	createResponse: function(data, taskID){
		var obj = {
			"Header": {
				"From": data.Header.To.toString(),
				"To": data.Header.From.toString(),
				"Timestamp": data.Header.Timestamp.toString(),
				"Process": data.Header.Process.toString(),
				"Action": data.Header.Action.toString(),
				"IsSource": (data.Header.Identifier.toString() == taskID).toString(),
				"Identifier": data.Header.Identifier.toString(),
				"Topic": 'FunctionalResponse'
			},
			"Data": {
				"ReferenceNumber": taskID,
				"Code" : '0'
			}
		};
		this._generateIXQueue(global.JSON.stringify(obj), this._getTaskID(taskID, true), 'Response');
	},
	
	//function to request an additional connected instance in IXCore
	requestInstance: function(insData){
		var obj = {
			"Header": {
				"Action": 'reqIns'
			},
			"Data": insData
		};
		this._generateIXQueue(global.JSON.stringify(obj), '');
	},
	
	healthCheck: function(){
		this._debugMsg('IXConnect: Healthcheck started');
		
		var srvState;
		var supGrp = gs.getProperty('x_ixii2_ixconnect.serverSupport');
		var srv = new GlideRecord('x_ixii2_ixconnect_servers');
		srv.query();
		while(srv.next()) {
			this._debugMsg('IXConnect: Healthcheck server ' + srv.host_name + ' found');
			
			var gr = new GlideRecord('x_ixii2_ixconnect_heartbeat');
			gr.addQuery('topic', 'HeartbeatProbe');
			gr.addQuery('hostname', srv.host_name);
			gr.orderByDesc('sys_created_on');
			gr.query();
			if(gr.next()) {
				this._debugMsg('IXConnect: Healthcheck server ' + srv.host_name + ' heartbeats found');
				
				//get datetime and compare to current date to decide the time between heartbeats
				var date = new GlideDateTime(gr.sys_created_on);
				var now = new GlideDateTime();
				var time = GlideDateTime.subtract(date, now).getNumericValue() / 1000;
				
				this._debugMsg('IXConnect: Healthcheck server ' + srv.host_name + ' calculated time: ' + time);
				
				if(time > 600){
					srv.status = 2; //down/stopped
					srv.update();
					srvState = 2;
				}else{
					if(srv.started==''){
						srv.started = new GlideDateTime();
					}
					srv.status = 1; //up/running
					srv.update();
					srvState = 1;
				}
				return srvState;
			}
		}
		return;
	},
	
	//create incident, parameter object and translated object
	createIncidentFromQueue: function(obj, retObj){
		
		//get mapped process from translations
		var tblGR = this._transProcess(obj.Header.Process);
		var inc = new GlideRecord(tblGR);
		inc.initialize();
		
		//set translated fields on the incident form
		for(var i=0; i < retObj.length; i++){
			this._debugMsg('IXConnect: QueueCreateIncident ' + global.JSON.stringify(retObj));
			inc[retObj[i].field_name] = retObj[i].value;
		}
		
		//fill in the reference fields for ixconnect on the form
		var ri = new GlideRecord('x_ixii2_ixconnect_instance');
		ri.addQuery('id', obj.Header.From);
		ri.query();
		if(ri.next()){
			inc.x_ixii2_ixconnect_source_instance = ri.sys_id;
		}
		inc.x_ixii2_ixconnect_source_identifier = obj.Header.Identifier;
		inc.x_ixii2_ixconnect_source_queueid = current.sys_id;
		
		/*
 		**
		For Demo purposes some static data in the Incident to complete the form
		BEGIN DEMO DATA
 		**
 		*/
		/*
		inc.caller_id = gs.getUserID();
		inc.assignment_group = 'Networking';
		inc.setValue('u_classification', 'business_software');
		inc.setValue('contact_type', 'Integration');
 		*/
		/*
 		** END OF DEMO DATA
 		*/
		
		var sid = inc.insert();
		inc.get(sid);
		
		return inc.number.toString();
	},
	
	updateIncidentFromQueue: function(obj, retObj){
		this._debugMsg('IXConnect: UpdatingFromQueue ' + global.JSON.stringify(retObj));
		
		var tblGR = this._transProcess(obj.Header.Process);
		
		var inc = new GlideRecord(tblGR);
		if(obj.Header.IsSource==false){
			inc.addQuery('number', obj.Header.Identifier);
		}else{
			inc.addQuery('x_ixii2_ixconnect_source_identifier', obj.Header.Identifier);
		}
		inc.query();
		if(inc.next()){
			
			for(var i=0; i < retObj.length; i++){
				this._debugMsg('IXConnect: looping in for ' + global.JSON.stringify(retObj[i].field_name + ' and value: ' + global.JSON.stringify(retObj[i].value)));
				
				inc[retObj[i].field_name] = retObj[i].value;
			}
			
			inc.work_notes = 'Incident Updated by external instance';
			inc.x_ixii2_ixconnect_sync = false; //set false to prevent busines rule updateQueue loop
			inc.update();
			
			return inc.number.toString();
		}
	},
	
	createInternalResponse: function(table,code,QID,Field,Value,ref,source){
		this._debugMsg('IXConnect: CreateInternalResponse starting glideRecord to: ' + table);
		
		//start gliderecord to table
		var rsp = new GlideRecord(table);
		rsp.initialize();
		rsp.code = this._getResponseCode(code);
		this._debugMsg('IXConnect: CreateInternalResponse code =  ' + rsp.code);
		
		if(Field!=null && Field != ''){
			rsp.error_detail = Field+' : '+Value; //moet nog aangevuld worden
		}
		rsp.ixqueue = QID;
		rsp.ticket_reference = this._getTaskID(ref,source);
		rsp.description = ''; //needs to be completed
		var rspID = rsp.insert();
		
		return rspID;
	},
	
	updateResponseReference: function(qid, numb){
		if(qid!=''){
			var gr = new GlideRecord('x_ixii2_ixconnect_responses');
			gr.addQuery('ixqueue', qid);
			gr.query();
			while(gr.next()){
				gr.ticket_reference = this._getTaskID(numb);
				gr.update();
			}
		}
	},
	
	//generate the IXQueue record, ready for IXCore
	_generateIXQueue: function(data, sid, topic){
		var iq = new GlideRecord('x_ixii2_ixconnect_ixqueue');
		iq.initialize();
		iq.incidentid = sid;
		iq.agent = 'ixcore.agent';
		iq.source = 'Output';
		iq.state = 'Waiting';
		iq.topic = topic;
		iq.payload = data;
		iq.insert();
	},
	
	_generateQResponse: function(id, data){
		var iq = new GlideRecord('x_ixii2_ixconnect_ixqueue');
		iq.initialize();
		iq.incidentid = id;
		iq.agent = 'ixcore.agent';
		iq.source = 'Output';
		iq.state = 'Waiting';
		iq.topic = 'FunctionalResponse';
		iq.payload = data;
		iq.insert();
	},
	
	_getResponseCode: function(code){
		var gc = new GlideRecord('x_ixii2_ixconnect_response_specifications');
		gc.addQuery('code', code);
		gc.query();
		if(gc.next()){
			
			return gc.sys_id;
		}
		return;
	},
	
	_getTaskID: function(numb,source){
		var gr = new GlideRecord('task');
		gr.addQuery('number', numb);
		gr.query();
		if(gr.next()){
			return gr.sys_id;
		}
		return;
	},
	
	_getProcess: function(prcs){
		var gr = new GlideRecord('x_ixii2_ixconnect_cdm_fieldmapping');
		gr.addQuery('process', prcs);
		gr.query();
		if(gr.next()){
			return gr.cdm_process.getDisplayValue();
		}
		return;
	},
	
	_transProcess: function(prcs){
		var gr = new GlideRecord('x_ixii2_ixconnect_cdm_fieldmapping');
		gr.addQuery('cdm_process.name', prcs);
		gr.query();
		if(gr.next()){
			return gr.process.getDisplayValue();
		}
		return;
	},
	
	_debugMsg: function(value){
		var debug = new x_ixii2_ixconnect.ixQDebug();
		debug.debug(value);
	},
	
	type: 'ixQueueConnect'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-11-16 20:54:13</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>d41c07016fb746007a31e0526e3ee43d</sys_id>
        <sys_mod_count>175</sys_mod_count>
        <sys_name>ixQueueConnect</sys_name>
        <sys_package display_value="IXConnect" source="x_ixii2_ixconnect">1241ba496f7746007a31e0526e3ee4d5</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="IXConnect">1241ba496f7746007a31e0526e3ee4d5</sys_scope>
        <sys_update_name>sys_script_include_d41c07016fb746007a31e0526e3ee43d</sys_update_name>
        <sys_updated_by>manuel</sys_updated_by>
        <sys_updated_on>2016-05-20 11:07:10</sys_updated_on>
    </sys_script_include>
</record_update>
