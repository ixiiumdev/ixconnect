<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ixii2_ixconnect_ixqueue</collection>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition table="x_ixii2_ixconnect_ixqueue">stateINProcessed,Waiting,Error^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="IN" or="false" value="Processed,Waiting,Error"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ixc-queueEvents</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function onBefore(current, previous) {
	var dbg = new x_ixii2_ixconnect.ixQDebug();
	dbg.debug('Started QueueEvents ' + current.state);
	
	
	var incid = current.incidentid;
	
	/*
	//for incoming queue events evaluate the state
	if(current.topic == 'Ticket' && current.source == 'Input'){
		incomingEvents(current.state, incid);
	}
	
	//for outgoing queue events evaluate the state
	if(current.topic == 'Ticket' && current.source == 'Output'){
		outgoingEvents(current.state,incid);
	}
	*/
	
	//set processed time only when the state changes
	if(current.state.changes() && !current.isNewRecord())
	current.processed = new GlideDateTime().getDisplayValue();
	
}

function incomingEvents(state, incid){
	var dbg = new x_ixii2_ixconnect.ixQDebug();
	dbg.debug('QueueEvents: incomingEvents: state = ' + state + ' & incid= ' + incid);
	
	var gr = new GlideRecord('task');
	gr.get(incid);
	//evaluate the current queue state
	if(state == 'Waiting'){
		gr.x_ixii2_ixconnect_source_sync_state = 2;//syncing
	}else if(state == 'Processed'){
		gr.x_ixii2_ixconnect_source_sync_state = 0; //OK
	}else if(state == 'Error'){
		gr.x_ixii2_ixconnect_source_sync_state = 9; //Error
	}
	gr.update();
}

function outgoingEvents(state,incid){
	var dbg = new x_ixii2_ixconnect.ixQDebug();
	dbg.debug('QueueEvents: outgoingEvents: state = ' + state + ' & incid= ' + incid);
	
	var gr = new GlideRecord('task');
	gr.get(incid);
	
	//evaluate the current queue state
	if(state == 'Waiting'){
		gr.x_ixii2_ixconnect_source_sync_state = 2;//syncing
	}else if(state == 'Processed'){
		gr.x_ixii2_ixconnect_source_sync_state = 0; //OK
	}else if(state == 'Error'){
		gr.x_ixii2_ixconnect_source_sync_state = 9; //Error
	}
}

]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>manuel</sys_created_by>
        <sys_created_on>2016-02-14 10:17:09</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0b3a90026fa9d2407a31e0526e3ee4c4</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>ixc-queueEvents</sys_name>
        <sys_overrides/>
        <sys_package display_value="IXConnect" source="x_ixii2_ixconnect">1241ba496f7746007a31e0526e3ee4d5</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="IXConnect">1241ba496f7746007a31e0526e3ee4d5</sys_scope>
        <sys_update_name>sys_script_0b3a90026fa9d2407a31e0526e3ee4c4</sys_update_name>
        <sys_updated_by>manuel</sys_updated_by>
        <sys_updated_on>2016-05-20 08:14:52</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0b3a90026fa9d2407a31e0526e3ee4c4"/>
</record_update>
